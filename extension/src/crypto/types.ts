export interface B64EncryptionResult {
  encryptedData: string;
  key: string;
  nonce: string;
}
export type BytesOrB64 = Uint8Array | string;

export interface EncryptedBox {
  /**
   * The data to decrypt.
   */
  encryptedData: BytesOrB64;
  /**
   * The nonce that was used during encryption.
   *
   * The nonce is required to decrypt the data, but it does not need to be
   * kept secret.
   */
  nonce: BytesOrB64;
}

export interface EncryptedBoxB64 {
  /**
   * The encrypted data as a base64 string.
   */
  encryptedData: string;
  /**
   * The nonce that was used during encryption, as a base64 string.
   *
   * The nonce is required to decrypt the data, but it does not need to be
   * kept secret.
   */
  nonce: string;
}

export interface EncryptedBlobB64 {
  /**
   * The encrypted data as a base64 string.
   */
  encryptedData: string;
  /**
   * A base64 string containing the decryption header.
   *
   * While the exact contents of the header are libsodium's internal details,
   * it effectively contains a random nonce generated by libsodium. It does
   * not need to be secret, but it is required to decrypt the data.
   */
  decryptionHeader: string;
}

export interface EncryptedBlobBytes {
  /**
   * The encrypted data.
   */
  encryptedData: Uint8Array;
  /**
   * The decryption header.
   *
   * While the exact contents of the header are libsodium's internal details,
   * it effectively contains a random nonce generated by libsodium. It does
   * not need to be secret, but it is required to decrypt the data.
   */
  decryptionHeader: Uint8Array;
}

export interface FileStream {
  stream: ReadableStream<Uint8Array>;

  chunkCount: number;

  fileSize: number;

  lastModifiedMs: number;

  file?: File;
}

export interface EncryptedBlob {
  /**
   * The encrypted data.
   */
  encryptedData: BytesOrB64;
  /**
   * The decryption header.
   *
   * While the exact contents of the header are libsodium's internal details,
   * it effectively contains a random nonce generated by libsodium. It does
   * not need to be secret, but it is required to decrypt the data.
   */
  decryptionHeader: BytesOrB64;
}
